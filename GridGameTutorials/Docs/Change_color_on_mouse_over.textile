{{toc}}

h1. Change color on mouse over

* Choose File > Save, then:
** Choose File > Save Scene As...
*** Name the new Scene: @BasicGridOnMouseOver@

h2. Create a new Material

A Material is an object that holds texture, color, and other information governing how an object is rendered.

* Select @Resources/Materials@
* Choose Create > Material

!Unity_Project_Panel_Material.png!

In the Inspector:
* Name: @MouseOverMaterial@
* Albedo: Pick a color you like
* Change Shader: Standard to Shader: Sprite > Default

!Unity_Material_Standard.png!

to

!Unity_Material_Sprite.png!

h2. Edit @Square@ script

In the Project panel:
* Select @Scripts@ folder
** Open @Square@ script

h3. Add Material, spriteRenderer, and Color data members

@Square@ needs to hold color information, so that it can report out what the color should be when responding to an @OnMouse@ event.

<pre><code class="cpp">
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Square : MonoBehaviour
{
    public Vector2Int gridPosition;
    public Material mouseOverMaterial; //Drag MouseOverMaterial into Square prefab's Square script to assign.
    
    //When the mouse hovers over the GameObject, it turns to this color
    static Color mouseOverColor;

    //This stores the GameObject’s original color
    Color originalColor;

    //Get the GameObject’s spriteRenderer to access the GameObject’s material and color
    SpriteRenderer spriteRenderer; //A spriteRenderer to get and swap colors
//SNIP//
</code></pre>

Initialize @spriteRenderer@, @originalColor@, and @mouseOverColor@ in @Awake()@, to ensure that these objects are assigned, regardless of whether or not @Square@ script is enabled on the @Square@ prefab.

<pre><code class="cpp">
    void Awake()
    {
        //Get the spriteRenderer component from the GameObject
        spriteRenderer = GetComponent<SpriteRenderer>();
        //Get the original color of the GameObject
        originalColor = spriteRenderer.material.color;
        mouseOverColor = mouseOverMaterial.color;

        //mouseOverColor = Resources.Load<Material>("Materials/MouseOverColor").color;
        // avoid using Resources if you want to build the project see:
        // https://unity3d.com/learn/tutorials/topics/best-practices/resources-folder
    }
</code></pre>

Assign @spriteRenderer.material.color@ in @OnMouseOver()@ and @OnMouseExit()@ functions:

<pre><code class="cpp">
    void OnMouseOver()
    {
        Debug.Log(name); //unity implicitly defines "name" for you to get the "name" of the object.
        GridManager.UpdateUI(this); //the keyword "this" refers to the current object, aka "this" object.
        spriteRenderer.material.color = mouseOverColor; //change color while mouse is over the object
    }

    void OnMouseExit()
    {
        GridManager.UpdateUI();
        spriteRenderer.material.color = originalColor;
    }
}
</code></pre>

h2. Assign @MouseOverMaterial@ to public @mouseOverMaterial@ in @Square@ prefab

In the Project panel:
* Open @Assets/Resources/Prefabs/Square@
** Select @Assets/Resources/Prefabs/Square@
** In the Inspector, click Open Prefab
In the Inspector:
* In "Square (Script)":
** Drag @Assets/Resources/Materials/MouseOverMaterial@ to "Mouse Over Material" field.

!Unity_GridGame_Square_Inspector_Screenshot_20190207_013322.png!

h2. @Square@ script

{{collapse(Click to expand...)
<pre><code class="cpp">
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Square : MonoBehaviour
{
    public Vector2Int gridPosition;
    public Material mouseOverMaterial; //Drag MouseOverMaterial into Square prefab's Square script to assign.
    
    //When the mouse hovers over the GameObject, it turns to this color
    static Color mouseOverColor;

    //This stores the GameObject’s original color
    Color originalColor;

    //Get the GameObject’s spriteRenderer to access the GameObject’s material and color
    SpriteRenderer spriteRenderer; //A spriteRenderer to get and swap colors

    void Awake()
    {
        //Get the spriteRenderer component from the GameObject
        spriteRenderer = GetComponent<SpriteRenderer>();
        //Get the original color of the GameObject
        originalColor = spriteRenderer.material.color;
        mouseOverColor = mouseOverMaterial.color;

        //mouseOverColor = Resources.Load<Material>("Materials/MouseOverColor").color;
        // avoid using Resources if you want to build the project see:
        // https://unity3d.com/learn/tutorials/topics/best-practices/resources-folder
    }
    void Start()
    {

    }
    //OnMouseOver() tells Unity what should happen when a mouse is over the object
    void OnMouseOver()
    {
        Debug.Log(name); //unity implicitly defines "name" for you to get the "name" of the object.
        GridManager.UpdateUI(this); //the keyword "this" refers to the current object, aka "this" object.
        spriteRenderer.material.color = mouseOverColor; //change color while mouse is over the object
    }

    void OnMouseExit()
    {
        GridManager.UpdateUI();
        spriteRenderer.material.color = originalColor;
    }
}
</code></pre>
}}

h2. Source code...check the repository!

See: https://pineapple.champlain.edu/projects/egd202-game-tech-1/repository/

{{include(daily_git)}}
