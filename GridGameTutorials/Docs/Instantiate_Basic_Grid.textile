{{toc}}

h1. Instantiate Basic Grid

h2. Create a new 2D project @GridGame@

* Create a new 2D project in your git repository
* Open Unity Hub
* Click +New...
** Name it @GridGame@

!Unity_Hub_GridGame_Screenshot_20190319_214142.png!

* Rename @SampleScene@ to @BasicGrid@
In Project panel:
* Select @Assets@
** Choose Create > Folder
*** Name it @Resources@
* Select @Assets@
** Choose Create > Folder
*** Name it @Scripts@
* Select @Resources@ folder
** Choose Create > Folder
*** Name it @Prefabs@
** Choose Create > Folder
*** Name it @Sprites@

OR in @git bash@ in this project's root, type: @mkdir -p {Assets/Resources/{Prefabs,Sprites},Assets/Scripts}@

h2. Set up @Square@ sprite assets

In the Project panel:
* Select @Assets/Resources/Sprites@ folder, then:
* Right-click and choose Create > Sprites > Square

h2. Create @Square@ prefab and @Square@ script

* In the Project panel: 
** Select @Assets/Square@, then:
* Click Add Component > Physics 2D > Add BoxCollider2D
* Click Add Component > New Script
** Name the script @Square@
* Move @Square@ script to @Assets/Scripts/@
* To create the @Square@ prefab:
** Drag @Square@ sprite from Hierarchy to @Resources/Prefabs@

h2. Create UI panel 

Create a UI panel to display what grid element the mouse is hovering over. 

* Choose GameObject > UI > Panel
* In the Inspector
** Rename @Canvas@ to @Grid_Canvas@
* In the Hierarchy
** Select @Text@
* In the Inspector
** Click the Rect Transform Anchor alignment pop-up and choose top left

!Unity_Anchor_Presets_Top_Left_Screenshot_20190202_005306.png!

** Right-click and choose Duplicate
*** Repeat 5 times.
** Create the following hierarchy of Text GameObjects:

|*GameObject Name*|*Text(Script)*|
|Grid_Label_Name|@Name:@|
|Grid_Label_Row|@Row:@|
|Grid_Label_Col|@Column:@|
|Grid_Col|@---@|
|Grid_Row|@---@|
|Grid_Name|@---@|

* The final result should look like this:

!Unity_Grid_Canvas_Label_Name_Tree_Screenshot_20190207_002533.png!

h3. Position each label and the panel

Zoom way out on the Scene, and you will be able to see the overlay for UI elements. The panel will initially fill the entire camera view. Move Text objects around to align them into a small UI in the upper left corner. For example:

!Unity_BasicGrid_UI_Edit_In_Scene_Screenshot_20190207_004053.png!

When completed, @BasicGrid@ scene will look like this in play-mode (grid may have fewer elements)

!Unity_BasicGrid_UI_Play_Mode_Screenshot_20190207_003801.png!

h2. Create @GridManager@ script

In this section, you will create a @GridManager@ as a private singleton. This will allow callers to use a regular calling syntax without any evidence of an instance for @GridManager@. In other words, this creates a private instance.

h3. Create an empty @GameObject@

* Choose GameObject > Create Empty
* Name it @Grid_Manager@
* Click Add Component > New Script
** Name the script @GridManager@
* Move @GridManager@ script to @Assets/Scripts/@

h3. Edit @GridManager@ script

Declare some variables:

<pre><code class="cpp">
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class GridManager : MonoBehaviour
{
    [HideInInspector] //hides the following public variable (up to the statement terminator ";") in the Inspector
    public GameObject gridHolder;
    public Square squarePrefab; //assign in Inspector on Grid_Manager to Assets/Prefabs/Square
    public float startX = 0;
    public float startY = 0;
    public int rows;
    public int cols;
    readonly float spacer = 0.1f; //readonly means what it says: spacer is not writable during runtime

    public Text nameTF; //Drag Grid_Name from Hierarchy to assign.
    public Text rowTF; //Drag Grid_Row from Hierarchy to assign.
    public Text colTF; //Drag Grid_Col from Hierarchy to assign.

    // GridManager will appear to be a public static class.
    private static GridManager instance;
//SNIP//
}
</code></pre>

Create a function to initialize the GridHolder, @InitGridHolder@:

<pre><code class="cpp">
    void InitGridHolder()
    {
        gridHolder = new GameObject();
        gridHolder.name = "Grid_Holder";
        gridHolder.transform.position = new Vector2(startX, startY);
    }
</code></pre>

Create a function to build the grid: @BuildGrid()@:

<pre><code class="cpp">
    void BuildGrid()
    {
        for (int i = 0; i < rows; i++)
        {
            for (int j = 0; j < cols; j++)
            {
                Square square = Instantiate(squarePrefab, gridHolder.transform);
                Vector2 newPos = new Vector2(j + (spacer * j), i + (spacer * i));
                square.transform.localPosition = newPos;
                square.name = "Square_" + i + "_" + j;
                square.gridPosition = new Vector2Int(i, j);
            }
        }
    }
</code></pre>

Call @BuildGrid()@ and @InitGridHolder()@ in @Start()@:

In @Start()@:

<pre><code class="cpp">
    void Start()
    {
        // squarePrefab = Resources.Load<Square>("Prefabs/Square");
        // avoid using Resources if you want to build the project see:
        // https://unity3d.com/learn/tutorials/topics/best-practices/resources-folder

        InitGridHolder();
        BuildGrid();
        instance = this; //the key to creating a singleton
    }
</code></pre>

Create an @UpdateUI()@ function:

<pre><code class="cpp">
    public static void UpdateUI(Square square = null)
    {
        if (square == null)
        {
            instance.nameTF.text = "---";
            instance.rowTF.text = "---";
            instance.colTF.text = "---";
            return;
        }

        instance.nameTF.text = square.name;
        instance.colTF.text = square.gridPosition.x.ToString();
        instance.rowTF.text = square.gridPosition.y.ToString();
    }
</code></pre>

h3. Assign public variables on @GameManager@

Now that @GameManager@ script features public data members, you need to hook those values up to objects in Unity. Drag the following to the public variables exposed in the Inspector:

!Unity_GridGame_GridManager_Assignment_Screenshot_20190207_010203.png!

Square Prefab: Drag @Assets/Prefabs/Square@ here to assign.
Name TF: Drag @Grid_Name@ from Hierarchy to assign.
Row TF: Drag @Grid_Row@ from Hierarchy to assign.
Col TF: Drag @Grid_Col@ from Hierarchy to assign.

h2. Edit @Square@ script

* Confirm that the @Square@ prefab, when opened, has a @Square@ script component.
** If not, click Add Component > New Script
*** Name it @Square@
** If, for some reason @Square@ prefab is missing the @Square@ script, AND @Assets/Scripts/Square@ exists, then:
*** Click Add Component > Scripts > @Square@

h3. Open @Square@ script for editing

@Square@ script is a class with data members and @OnMouseOver()@ and @OnMouseExit()@ calls. It calls @UpdateUI()@ in @GameManager@ script.

<pre><code class="cpp">
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Square : MonoBehaviour
{
    public Vector2Int gridPosition;

    //OnMouseOver() tells Unity what should happen when a mouse is over the object
    void OnMouseOver()
    {
        Debug.Log(name); //unity implicitly defines "name" for you to get the "name" of the object.
        GridManager.UpdateUI(this); //the keyword "this" refers to the current object, aka "this" object.
    }

    void OnMouseExit()
    {
        GridManager.UpdateUI();
    }
}
</code></pre>

h2. @Square@

{{collapse(Click to expand...)
<pre><code class="cpp">
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Square : MonoBehaviour
{
    public Vector2Int gridPosition;

    //OnMouseOver() tells Unity what should happen when a mouse is over the object
    void OnMouseOver()
    {
        Debug.Log(name); //unity implicitly defines "name" for you to get the "name" of the object.
        GridManager.UpdateUI(this); //the keyword "this" refers to the current object, aka "this" object.
        spriteRenderer.material.color = mouseOverColor; //change color while mouse is over the object
    }

    void OnMouseExit()
    {
        GridManager.UpdateUI();
        spriteRenderer.material.color = originalColor;
    }
}
</code></pre>
}}

h2. @GridManager@

{{collapse(Click to expand...)
<pre><code class="cpp">
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;


public class GridManager : MonoBehaviour
{
    [HideInInspector] //hides the following public variable (up to the statement terminator ";") in the Inspector
    public GameObject gridHolder;
    public Square squarePrefab; //assign in Inspector on Grid_Manager to Assets/Prefabs/Square
    public float startX = 0;
    public float startY = 0;
    public int rows;
    public int cols;
    readonly float spacer = 0.1f; //readonly means what it says: spacer is not writable during runtime

    public Text nameTF; //Drag Grid_Name from Hierarchy to assign.
    public Text rowTF; //Drag Grid_Row from Hierarchy to assign.
    public Text colTF; //Drag Grid_Col from Hierarchy to assign.

    // GridManager will appear to be a public static class.
    private static GridManager instance;

    // Start is called before the first frame update
    void Start()
    {
        // squarePrefab = Resources.Load<Square>("Prefabs/Square");
        // avoid using Resources if you want to build the project see:
        // https://unity3d.com/learn/tutorials/topics/best-practices/resources-folder

        InitGridHolder();
        BuildGrid();
        instance = this; //the key to creating a singleton
    }

    void InitGridHolder()
    {
        gridHolder = new GameObject();
        gridHolder.name = "Grid_Holder";
        gridHolder.transform.position = new Vector2(startX, startY);
    }

    void BuildGrid()
    {
        for (int i = 0; i < rows; i++)
        {
            for (int j = 0; j < cols; j++)
            {
                Square square = Instantiate(squarePrefab, gridHolder.transform);
                Vector2 newPos = new Vector2(j + (spacer * j), i + (spacer * i));
                square.transform.localPosition = newPos;
                square.name = "Square_" + i + "_" + j;
                square.gridPosition = new Vector2Int(i, j);
            }
        }
    }
    
    public static void UpdateUI(Square square = null)
    {
        if (square == null)
        {
            instance.nameTF.text = "---";
            instance.rowTF.text = "---";
            instance.colTF.text = "---";
            return;
        }

        instance.nameTF.text = square.name;
        instance.colTF.text = square.gridPosition.x.ToString();
        instance.rowTF.text = square.gridPosition.y.ToString();
    }
}
</code></pre>
}}

h2. Source code...check the repository!

See: https://pineapple.champlain.edu/projects/egd202-game-tech-1/repository/

{{include(daily_git)}}
