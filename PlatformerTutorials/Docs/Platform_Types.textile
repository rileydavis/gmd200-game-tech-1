{{toc}}

h1. Platform Types

h2. Create @Platform_Types@ scene

Continuing with the @Platformer@ project...

* Open the @Platformer@ tutorial project in Unity Hub
* In the Project panel:
** Expand @Assets/Scenes@ folder
* Open the @Movement_and_Animations@ scene
* Choose File > Save As...
** Name the new scene: @Assets/Scenes/Platform_Types@

h3. Un-freeze @Player@ rotation

Note that Freezing rotation will break some platform behaviors.

In the Hierarchy:
* Select @Player@
In the Inspector:
* Check Rigidbody2D::Constraints::Freeze Rotation

h3. Unparent @Main Camera@

For the purposes of this scene, changing this will better demonstrate what each platform type does.

In the Hierarchy:
* Select @Player/Main Camera@
* Drag @Main Camera@ to a position at the same level, ie: adjacent to, @Player@

!Unity_Unparent_Main_Camera_Screenshot_20190226_220708.png!

h3. Set the size of the camera to @10@

In the Hierarchy:
* Select @Main Camera@
In the Inspector:
* Set Camera::Size: to @10@

h2. Create a checkpoint

A checkpoint in a game serves two functions. A proper checkpoint will store the state of the game. In this "position" checkpoint, the player character will be reset to a position set by an empty that a designer places in the level.

h3. Create @ResetTrigger@

In the case of our @ResetTrigger@ do the following:

In the Hierarchy:
* Deselect @Player@ (if it happens to be selected)
* Click Create > Create Empty
In the Inspector:
* Rename @GameObject@ to @ResetTrigger@
* Click Add Component > Physics2D > Box Collider2D
** Set BoxCollider2D::Size::X,Y to 5,5
** Check Is Trigger
* Click Add Component > New Script
** Name the new class @ResetTriggerScript@
In the Project panel:
* Drag @ResetTriggerScript@ to @Assets/Scripts/@

!Unity_ResetTrigger_Empty_Screenshot_20190226_212554.png!


h3 Add @PlayerReposition@ script to @Player@

In the Hierarchy:
* Select @Player@
* Click Add Component > New Script
** Name the new class @PlayerReposition@
In the Project panel:
* Drag @PlayerReposition@ to @Assets/Scripts/@
In the Inspector:
* Open @PlayerReposition@ to edit
In your editor of choice...

h4. Declare some variables

<pre><code class="cpp">
    Vector2 origPlayerPosition;
</code></pre>

h4. Initialize variables in @Start()@

<pre><code class="cpp">
    void Start()
    {
        origPlayerPosition = transform.localPosition;
    }
</code></pre>

h4. Create @RepositionPlayer()@ function in @PlayerReposition@ class

<pre><code class="cpp">
    public void RepositionPlayer()
    {
        transform.localPosition = origPlayerPosition;
    }
</code></pre>

h4. Call @RepositionPlayer()@ function in @ResetTriggerScript@

In the Project panel:
* Double-click @Assets/Scripts/ResetTriggerScript@
In your editor of choice...

h4. Add @OnTriggerEnter2D()@ 

<pre><code class="cpp">
    void OnTriggerEnter2D(Collider2D collider)
    {
        if (collider.tag == "Player")
        {
            collider.gameObject.GetComponent<PlayerReposition>().RepositionPlayer();
        }
    }
</code></pre>

h2. Tag @Player@ as @Player@

In the Hierarchy:
* Select @Player@
In the Inspector:
* For Tag, choose @Player@

h2. TEST

Now is a good time to test your progress. The Player's position should reset to the initial position of @Player@ when colliding with the Empty @ResetTrigger@.

h2. Exercise: Create some player feedback on @RepositionPlayer()@

Add some player feedback, perhaps an animation to show that the player has been set back to the checkpoint.


h2. Material Platforms

h3. Create some 2D Physics Materials:

In the Project panel:
* Click @Assets/@
* Choose Create > Folder
** Name: @Materials@
* Click @Assets/Materials@
* Choose Create > Physics Material 2D
** Create several, setting properties in the Inspector as shown in the following table:

| Physics Material 2D Name  | Friction  | Bounciness    |
| Sticky                    | 5         | 0             |
| Bouncy                    | 0.4       | 1.1           |
| Icy                       | 0         | 0             |

!Unity_Project_Materials_Bouncy_Icy_Sticky_Screenshot_20190226_215613.png!

h3. Create some Platforms to apply the Physics Materials to...

If you have been following along, you should have a @Grass@ prefab in @Assets/Prefabs/@. 


In the Project panel:
* Drag @Grass@ prefab from the Project panel to the Scene
In the Inspector:
* Set X Scale to @5@
* Duplicate it four times

Click on each Platform and name and set the Box Collider 2D Material as follows:

To set the Material, click the little target icon next to the Material assignment box.

* Grass
** None
* Ice
** Icy
* Glue
** Sticky
* Rubber
** Bouncy

!Unity_Platforms_And_MaterialsScreenshot_20190226_222021.png!

h3. TEST

Try out the different platforms.

h2. Spring Joint Platforms

Unity has lots of springs. See: https://docs.unity3d.com/Manual/Joints2D.html

In the Project panel:
* Drag @Assets/Prefabs/Grass@ to the Scene
In the Inspector:
* Name it @Swing@
* Set X Scale to @3@
* Check Rigidbody2D::Constraints::Freeze Rotation
* Click Add Component > Physics2D > Spring Joint 2D
In the Scene:
* Drag the little blue anchor dot "up" above the platform

Test it out! 

h3. Set up a constrained anchor

Drag @Grass@ prefab to Scene
* Name it @SwingAnchor@
* Click Add Component > Physics2D > Rigidbody2D
In the Inspector:
* Check Rigidbody2D::Constraints::Freeze Position Y
* Check Rigidbody2D::Constraints::Freeze Rotation Z
In the Hierarchy:
* Select @Swing@
* Choose Edit > Duplicate
In the Inspector
* Name the newly duplicated @Swing (1)@ to @AnotherSwing@
* Assign Spring Joint 2D::Connected Rigid Body to @SwingAnchor@
* Check Rigidbody2D::Constraints::Freeze Position X
* Check Rigidbody2D::Constraints::Freeze Rotation Z

Test it out!

* Set the Rigidbody2D on @SwingAnchor@ to Kinematic
What changed?

h2. Make several Physics spring platforms to play with

Read the documentation from Unity on physics springs:

See: https://docs.unity3d.com/Manual/Joints2D.html

Try making one of each type.

h2. Platforms with Force

There are several ways to have platforms "push" the player character with some kind of force. Here are some examples:
* Force by trigger with accompanying script
* Place a Point Effector on the platform
* Place an Area Effector on Gradient trigger

Go through the following tutorials:

https://unity3d.com/learn/tutorials/topics/2d-game-creation/surface-effector-2d-and-platform-effector-2d


h2. Moving Platforms

Create a group of nodes for a platform to follow. Note that the initial position of the platform will not be a part of the array in the setup that follows. Could you make that happen in code? How could you use the object Hierarchy itself to create an array in @Start()@, then iterate over that array in the @MovePlatform@ class?

In this section, it is vital to understand the following, especially Parenting, as explained here: 
https://docs.unity3d.com/Manual/Transforms.html

Note what is said about adjusting the Scale transform when using Physics Engine: AVOID IT.

In addition, read the following: https://docs.unity3d.com/Manual/class-Rigidbody.html

h3. Create a @MovingPlatform@ "node list"

In the Hierarchy:
* Click Create > Create Empty
* Name it @MovingPlatform@
** This will serve as a sort of group for a list of move-to nodes.
* Just for future clarity, position @MovingPlatform@ at @-5,0,0@

For @each@ in @{One,Two,Three,Four}@
* Click @MovingPlatform@
* Click Create > Create Empty Child
* Name it @each@
** This should result in a hierarchy like:
*** @MovingPlatform@
**** @Zero@
**** @One@
**** @Two@
**** @Three@

FYI: expressing a list by grouping elements in curly brackets: @{}@ is quite common in programming languages. The @for each@ or @foreach@ construction is also very common, and is, in fact part of @C#@ as well. In this case, I am explicitly referring to @bash shell script@, which can be used in the @git bash@ shell. You can write little programs directly in the shell. Try it sometime! I invite you to learn more about @bash@ and related @UNIX or GNU/Linux@ utilities. I found Mendel Cooper's Advanced @Bash@-Scripting Guide guide quite helpful: https://www.tldp.org/LDP/abs/html/index.html 

!Unity_MovingPlatform_Empty_Node_Tree_Screenshot_20190227_212038.png!

h4. Position @each@ empty in the "node list"

You can position these anywhere you like, but for the purposes of this demonstration, I suggest the following:

|*Node*|*X*|*Y*|*Z*|
|Zero|@0@|@0@|@0@|
|One|@10@|@0@|@0@|
|Two|@10@|@5@|@0@|
|Three|@0@|@5@|@0@|

Note that these positions are expressed as Local Coordinates relative to the position of @MovingPlatform@. This happens whenever a gameObject parents a transform. Admittedly, the Unity interface could be more explicit about that fact, but you may find this useful when you are reading off the values of a moving platform's position.

h3. Add a @MovingGrass@ platform

In the Project panel:
* Drag @Assets/Prefabs/Grass@ on top of @MovingPlatform@
** This should make @Grass@ a child of @MovingPlatform@
In the Inspector:
* Rename @Grass@ to @MovingGrass@
* Set X Scale to @1@ (it was 10)
** Better yet, go into the prefab and change the Scale values to @1,1,1@
* Set Position to @-5,0,0@
** Note that this will be a relative position based on the location of @MovingPlatform@, not a global position.


h3. Create @MovePlatform@ script 

In the Hierarchy:
* Click @MovingPlatform@
In the Inspector:
* Click Add Component > New Script
* Name it: @MovePlatform@
In the Project panel:
* Drag @MovePlatform@ to @Assets/Scripts/@ folder

h3. Edit @MovePlatform@

h4. Declare some variables

<pre><code class="cpp">
    public GameObject platform; //points to the platform prefab in the MovingPlatform
    //this is what will move, MovingPlatform just stays in position
    public float speed = 5f;// how fast the platform moves
    public Transform[] movePoints;// an array of points that the platform will follow
    Transform currentPoint;//the current point the platform is moving toward
    public int pointIndex = 0;//current index of the current platform
    public bool isLooping = false; //Loop the moving platform?
</code></pre>

Save @MovePlatform@ script and return to Unity.

h3. Assign public variables

In the Hierarchy:
* Click @MovingPlatform@
In the Inspector:
* Drag @MovingGrass@ from the Hierarchy to assign a value for Platform
* Expand @Move Points@ to reveal the Array elements
** Set Size to @4@
* Drag nodes to assign as elements of the @movePoints@ array

|*Node*|*@movePoints element@*|
|Zero|@0@|
|One|@1@|
|Two|@2@|
|Three|@3@|

!Unity_MovingPlatform_movePoints_Screenshot_20190228_000037.png! 

h3. Resume editing of @MovePlatform@ script

Set the current point in @Start()@: 

<pre><code class="cpp">
    void Start()
    {
        currentPoint = movePoints[pointIndex];
    }
</code></pre>

Call @Vector2.MoveTowards()@ function in @Update()@ and then update @pointIndex@ to move to the next node in the list:

<pre><code class="cpp">
    void Update()
    {
        platform.transform.position = Vector2.MoveTowards(platform.transform.position, currentPoint.position, Time.deltaTime * speed);

        if (platform.transform.position == currentPoint.position)
        {
            if (pointIndex < movePoints.Length - 1)
            {
                pointIndex++;
                currentPoint = movePoints[pointIndex];
                Debug.Log(pointIndex);
            }
            else if (isLooping == true)
            {
                pointIndex = 0;
                currentPoint = movePoints[pointIndex];
            }
        }
    }
</code></pre>

h3. TEST

At this point, movement should work. However, the @Player@ will not "stick" to the moving platforms.

h3. @OnCollisionEnter2D()@ make the @Player@ a child of the platform

As noted in the reading about the Transform.scale property, it is totally inadvisable to have an object that has any scale factor other than @1,1,1@ the default scale factor, for any object that will become a parent to the player object. 

Why? Here is a hilarious screenshot:

!Unity_Scale_Factor_When_Parenting_Screenshot_20190228_003623.png!

In this situation, note that the @MovingGrass@ platform has a @Transform.scale.x@ of @5@. When the @Player@ hits a corner of the @MovingGrass@ platform, it will adopt the scaling factor of the platform, and that will permanently apply to the child object. How do you avoid this problem?

*DO NOT SCALE OBJECTS YOU INTEND TO SET AS MOVING OBJECTS*

Change the size of the object directly in an Art tool, then import it as a sprite. In our case: Adobe tools, or Inkscape or Krita (or Gimp). 

h4. Tag @MovingGrass@ with a new @MovingPlatform@ tag

In the Inspector:
* Tag @MovingGrass@ as @MovingPlatform@:
** Click Tag > Untagged and choose Add Tag...
** Click the little "+" sign and name the Tag: @MovingPlatform@
In the Hierarchy:
* Click @MovingGrass@
In the Inspector:
* Click Tag > @MovingPlatform@

h4. Edit @PlayerMovement@ script

<pre><code class="cpp">
    void OnCollisionEnter2D(Collision2D collision)
    {
        if (collision.gameObject.tag == "MovingPlatform")
        {
            transform.parent = collision.transform;
        }
    }

    void OnCollisionExit2D(Collision2D collision)
    {
        if (collision.gameObject.tag == "MovingPlatform")
        {
            transform.parent = null;
        }
    }
</code></pre>



h2. Source code...check the repository!

See: https://pineapple.champlain.edu/projects/egd202-game-tech-1/repository/

{{include(daily_git)}}
